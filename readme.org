This is a prototype parser in ANLTR4 for the Dissolve file format.  To
build, you'll need to customize the =INCLUDE= and =LINK= variables at
the start of the [[file:Makefile][Makefile]] to point to ANTLR4 include and library
directories, respectively.  The code can then be compiled with a
simple =make= and ran with =make test=.

The structure of the project is roughly as follows:

- [[file:Dissolve.g4][Dissolve.g4]] :: The ANTLR4 grammar for the Dissolve file format.  The
  grammar is written to be as specific as possible to enable as much
  of the logic as possible to be contained in the parser itself,
  minimising the amount of code that needs to be manually written.
  The base grammar is the =program=.
- [[types.h]] :: The basic datatypes that are being parsed.  When this
  prototype is merged in with dissolve, this file would be removed and
  replaced with the actual classes.
- [[file:types.cpp][types.cpp]] :: Implementations of the << operator for the various classes defined in [[types.h]]
- [[Visitor.h]] :: Defines the =MyVisitor= class that does the actual
  parsing.  This class derives from =DissolveBaseVisitor=, which is
  generated by ANTLR4.  For the most part, we override the visit
  functions (e.g. =visitSpeciesAtom=) and have it return the parsed
  value.  The =visit= member function is provided for us and will
  automatically call the correct visit member for any given context.


  There are also a couple of templates that help parsing common
  situations that arise (e.g. vectors of contexts, default values for
  missing options).

- [[Visitor.cpp]] :: Implementations of the parsers for the base types (e.g. Boolean and Num).  It also contains the parser for the final =Program= type.

- [[Visitor-species.cpp]] :: Implementations of the =Species= block and all of the parsers needed to implement it.

- [[Visitor-pairPotential.cpp]] :: Implementations of the =PairPotential= block and all of the parsers needed to implement it.

- [[Visitor-master.cpp]] :: Implementations of the =Master= block and all
  of the parsers needed to implement it.  It's worth observing that
  the parsers update a private vector of =BondKind= in the =MyVisitor=
  which later parsers (mainly =Species=) can pull references values
  from.
- [[cpp_parser.cpp]] :: An example program that parses all of the Dissolve
  script files that it's passed as arguments.

One issue that arises is that ANTLR4 has each visitor return their own
custom =Any= type that can then be cast into the correct type.
However, it does not seem to handle variant/union/sum types well and
will crash when trying to pass them.  To this end, parsing functions
that return a variant type will use a =strict= prefix, instead of
=visit=, and will return their exact type, instead of =Any=.

As an aside about the advantage of this more declarative parsing syle, here's a break down of the code complexity of a couple of the parsing files

| File                      | Variables | If Statements | For Loops |
|---------------------------+-----------+---------------+-----------|
| [[Visitor-pairPotential.cpp]] |         0 |             2 |         0 |
| [[Visitor-species.cpp]]       |         0 |             3 |         0 |
| [[Visitor-master.cpp]]        |         3 |             0 |         0 |
| [[Visitor.cpp]]               |         3 |             2 |         1 |
